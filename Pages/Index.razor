@using System.Text.Json 
@using System.Text 
@using System.Net.Http.Headers
@using System.IO
@using Syncfusion.Blazor.Buttons


@page "/"
@inject HttpClient Http

@inject IJSRuntime JSRuntime

<div class="cards-container">
    <div class="texts">
                <h1>Welcome to bg remover.</h1>
                <h1>Let's get rid of that background!</h1>

            </div>
    <div class="upload">
        <div class="upload-content">
            
            <InputFile class="custom-file-input" multiple OnChange="OnChange" accept="image/png, image/jpeg, image/gif" id="inputFile" />
            <label for="inputFile" class="button">Upload Image</label>   
            @* <p1 class="text">Or drop it</p1> *@
        </div> 
        </div>
        @if (!imageUploaded) {
    
}
<div class="display">
    <div class="content-flex">
        <!-- Image Display Container -->
        <div class="image-display-container">
            @foreach (var item in filesBase64.Select((file, index) => new { file, index }))
            {
                <div class="image-container">
                    <img src="data:@item.file.contentType;base64,@item.file.base64data" />
                </div>
            }
        </div>
        @* <button class="btn btn-secondary" @onclick="RemoveBackgrounds"><SfIcon Name="IconName.Image" Size="IconSize.Medium"></SfIcon></button>
            <button class="btn btn-danger" @onclick="DeleteLastImage"><SfIcon Name="IconName.Close" Size="IconSize.Medium"></SfIcon></button>
            <button class="btn btn-primary" @onclick="DownloadImage"><SfIcon Name="IconName.Upload" Size="IconSize.Medium"></SfIcon></button> *@

        <!-- Buttons Container -->
        <div class="buttons-container">
            @if (imageUploaded) {
            <div class="btn1" data-tooltip="Remove Backgrounds" @onclick="RemoveBackgrounds">
                <SfIcon Name="IconName.Image" Size="IconSize.Medium"></SfIcon>
                    <span class="tooltip-text">
                        Erase Backgrounds
                    </span>
            </div>
            <div class="btn3" data-tooltip="Remove Backgrounds" @onclick="DownloadImage">
                <SfIcon Name="IconName.Upload" Size="IconSize.Medium"></SfIcon>
                    <span class="tooltip-text">
                        Download Image
                    </span>
            </div>
            <div class="btn2" data-tooltip="Remove Backgrounds" @onclick="DeleteLastImage">
                <SfIcon Name="IconName.Close" Size="IconSize.Medium"></SfIcon>
                    <span class="tooltip-text">
                        Remove Image
                    </span>
            </div>
            }
        </div>
        @if (!imageUploaded) {
    <h1 class="title">Your Image</h1>
}
    </div>
</div>
<div class="squares-container">
    @foreach (var item in processedImages)
    {
        <div class="square">
            <img src="data:@item.contentType;base64,@item.base64data" class="square-img" />
        </div>
    }
</div>

</div>



@code {
    List<ImageFile> filesBase64 = new List<ImageFile>();
    List<byte[]> originalImages = new List<byte[]>(); // Store original images for background removal
        List<ImageFile> processedImages = new List<ImageFile>();

    string message = "Choose your picture!";
    bool isDisabled = false;
    string removeBgApiKey = ""; // Replace with your actual API key
    bool imageUploaded = false; // Flag to track image upload
        HashSet<string> processedImageNames = new HashSet<string>();


    async Task OnChange(InputFileChangeEventArgs e)
{   
    // Your logic to handle the file upload starts here
    originalImages.Clear(); // Clear previous images
    filesBase64.Clear(); // Optionally clear previous displayed images
    var files = e.GetMultipleFiles();
    foreach(var file in files)
    {
        var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480);
        var buf = new byte[resizedFile.Size];
        using (var stream = resizedFile.OpenReadStream())
        {
            await stream.ReadAsync(buf);
        }

        originalImages.Add(buf); // Store original image data for later processing

        // Convert and store the image for display
        var base64Image = Convert.ToBase64String(buf);
        filesBase64.Add(new ImageFile { base64data = base64Image, contentType = file.ContentType, fileName = file.Name });
    }

    // After successfully adding images, update the flag to indicate an image has been uploaded
    imageUploaded = true;
    StateHasChanged();
}

// You can refactor the code from OnChange to a new method, e.g., ProcessUploadedFiles, and call it both from OnChange and OnDrop.



  async Task RemoveBackgrounds()
{
    // Assuming originalImages holds the bytes for newly uploaded images.
    // Start the background removal process for new images and update processedImages list.
    foreach (var image in originalImages.Select((value, index) => new { value, index }))
    {
        var base64Image = Convert.ToBase64String(image.value);
        var response = await RemoveBackground(base64Image);
        if (response != null)
        {
            // Add processed image to the list, retaining previously processed images
            processedImages.Add(new ImageFile { base64data = response, contentType = "image/png", fileName = filesBase64[image.index].fileName });
        }
        else
        {
            // Optionally, add a placeholder or the original image if processing fails
            processedImages.Add(new ImageFile { base64data = base64Image, contentType = "image/png", fileName = filesBase64[image.index].fileName });
        }
    }
    StateHasChanged(); // Refresh UI to display the updated images list
}





void DeleteLastImage()
{
    if (filesBase64.Any())
    {
        filesBase64.RemoveAt(filesBase64.Count - 1);
        if (filesBase64.Count == 0)
        {
            imageUploaded = false; // No images left, show the title again
        }
    }
    StateHasChanged(); // Refresh the UI
}
async Task DownloadImage()
{
    if (filesBase64.Any())
    {
        var image = filesBase64.Last(); // Assuming you want to download the last image in the list
        await JSRuntime.InvokeVoidAsync("saveAsFile", image.fileName, image.base64data);
    }
}



  async Task<string?> RemoveBackground(string base64Image)
{
    var requestContent = new StringContent(JsonSerializer.Serialize(new
    {
        image_file_b64 = base64Image,
        size = "auto"
    }), Encoding.UTF8, "application/json");

    requestContent.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
    requestContent.Headers.Add("X-Api-Key", "");

    var response = await Http.PostAsync("https://api.remove.bg/v1.0/removebg", requestContent);
    if (response.IsSuccessStatusCode)
    {
        using (var responseStream = await response.Content.ReadAsStreamAsync())
        using (var memoryStream = new MemoryStream())
        {
            await responseStream.CopyToAsync(memoryStream);
            var resultImageBytes = memoryStream.ToArray();
            return Convert.ToBase64String(resultImageBytes);
        }
    }
    else
    {
        // Return null or an appropriate default value if the API call fails
        return null;
    }
}
Dictionary<string, object> customAttribute = new Dictionary<string, object>()
   {
       { "style", "font-size: 20px" }
   };
}